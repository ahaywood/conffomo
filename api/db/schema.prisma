// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id                  Int             @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String          @unique
  username            String          @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  avatar              String?
  cover               String?
  bio                 String?
  location            String?
  website             String?
  public              Boolean         @default(true)
  directMessages      Boolean         @default(true) // can receive direct messages
  onboarded           Boolean         @default(false) // whether this user has onboarded
  reported            Boolean         @default(false) // whether someone has reported this account?
  likes               Like[]
  comments            Comment[]
  bookmarks           Bookmark[]
  posts               Post[]
  plans               Plan[]
  messagesTo          Message[]       @relation("to_user")
  messagesFrom        Message[]       @relation("from_user")
  attendingPlans      AttendingPlan[]
  mutedBy             Muted[]         @relation("muted_by") // this is the user doing the muting, should be this user
  mutedUser           Muted[]         @relation("muted_user")
  attachments         Attachment[]
  attending           Attending[]
  organization        Organization[]
  blockedByUser       Block[]         @relation("blocked_by_user")
  blockedUser         Block[]         @relation("blocked_user")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Block {
  id              Int      @id @default(autoincrement())
  blockedByUser   User     @relation(fields: [blockedByUserId], references: [id], name: "blocked_by_user") // user doing the blocking
  blockedByUserId Int
  blockedUser     User     @relation(fields: [blockedUserId], references: [id], name: "blocked_user") // user doing the blocking
  blockedUserId   Int
  blockedEvent    Event    @relation(fields: [eventId], references: [id])
  eventId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  events    Event[]
  user      User     @relation(fields: [userId], references: [id]) // owner
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attending {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  speaking  Boolean  @default(false) // true if the user is speaking at this event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id]) // author
  userId      Int
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     Int
  content     String
  plan        Plan         @relation(fields: [PlanId], references: [id]) // associated to Plans
  PlanId      Int
  attachments Attachment[]
  comments    Comment[]
  bookmarks   Bookmark[]
  likes       Like[]
  reported    Boolean      @default(false) // if the post has been reported
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum AttachmentType {
  PHOTO
  VIDEO
}

model Attachment {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  post      Post           @relation(fields: [postId], references: [id])
  postId    Int
  alt       String?
  caption   String?
  threads   Thread[]
  type      AttachmentType @default(PHOTO)
  message   Message        @relation(fields: [messageId], references: [id])
  messageId Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Event {
  id              Int              @id @default(autoincrement())
  name            String
  startDate       DateTime
  endDate         DateTime?
  organization    Organization     @relation(fields: [organizationId], references: [id])
  organizationId  Int
  thumbnail       String?
  cover           String?
  recommendations Recommendation[]
  description     String?
  location        String?
  website         String?
  public          Boolean          @default(true)
  reported        Boolean          @default(false)
  posts           Post[]
  plans           Plan[]
  muted           Muted[]
  attending       Attending[]
  blocks          Block[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  title     String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  street1   String?
  street2   String?
  city      String?
  state     String?
  zip       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id           Int        @id @default(autoincrement())
  comments     Comment[]
  attachments  Attachment @relation(fields: [attachmentId], references: [id])
  attachmentId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id]) // author
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  comment   String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Muted {
  id          Int      @id @default(autoincrement())
  mutedBy     User     @relation(fields: [mutedById], references: [id], name: "muted_by") // this is the user doing the muting
  mutedById   Int
  mutedUser   User     @relation(fields: [mutedUserId], references: [id], name: "muted_user")
  mutedUserId Int
  mutedEvent  Event    @relation(fields: [eventId], references: [id])
  eventId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id             Int             @id @default(autoincrement())
  title          String
  startDate      DateTime        @default(now())
  endDate        DateTime?
  thumbnail      String?
  reported       Boolean         @default(false)
  street1        String?
  street2        String?
  city           String?
  state          String?
  zip            String?
  public         Boolean         @default(false)
  limit          Int? // limit the number of people that can attend
  event          Event           @relation(fields: [eventId], references: [id])
  eventId        Int
  user           User            @relation(fields: [userId], references: [id]) // author / owner of the plans
  userId         Int
  attendingPlans AttendingPlan[] // list of users planning on attending
  posts          Post[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum AttendingStatus {
  INTERESTED
  GOING
}

model AttendingPlan {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  plan      Plan             @relation(fields: [planId], references: [id])
  planId    Int
  status    AttendingStatus?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Message {
  id          Int          @id @default(autoincrement())
  toUser      User         @relation(fields: [toUserId], references: [id], name: "to_user")
  toUserId    Int
  fromUser    User         @relation(fields: [fromUserId], references: [id], name: "from_user")
  fromUserId  Int
  message     String
  edited      Boolean      @default(false)
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  // postId
  // commentId
  // type // enum -
  // userId
  // eventId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
